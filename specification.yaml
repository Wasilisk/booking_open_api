openapi: 3.0.0
info:
  title: System Operations API
  description: API for managing user profiles, bookings, movies, halls, and sessions.
  version: 1.0.0
paths:
  /user/register:
    post:
      summary: Create account
      description: Register a new user.
      tags:
        - User profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: The user profile is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
  /user/profile:
    get:
      summary: Retrieve user profile
      description: Retrieves the profile information for the logged-in user.
      tags:
        - User profile
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          required: true
          description: ID of the user to retrieve.
      responses:
        '200':
          description: The user details are successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  user_name:
                    type: string
                  user_email:
                    type: string
  /user/login:
    get:
      summary: Log in to an existing account
      description: Log in to an existing account with email and password.
      tags:
        - User profile
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: true
          description: Email address of the user account to log in to.
        - in: query
          name: password
          schema:
            type: string
          required: true
          description: Password of the user account to log in to.
      responses:
        '200':
          description: The user logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
  /user/token/refresh:
    get:
      summary: Update expired access token
      description: Updates an expired access token.
      tags:
        - User profile
      parameters:
        - in: query
          name: refresh_token
          schema:
            type: string
          required: true
          description: Refresh token to update access token.
      responses:
        '200':
          description: The user can continue to work with the system.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
  /booking/hall:
    post:
      summary: Create hall
      description: Create a new cinema hall.
      tags:
        - Booking
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hall_name:
                  type: string
      responses:
        '200':
          description: The hall is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hall_id:
                    type: integer
                  hall_name:
                    type: string
    get:
      summary: Get all halls
      description: Get a list of all cinema halls.
      tags:
        - Booking
      responses:
        '200':
          description: A list of all cinema halls is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  halls:
                    type: array
                    items:
                      type: object
                      properties:
                        hall_id:
                          type: integer
                        hall_name:
                          type: string
  /booking/movie:
    post:
      summary: Create movie
      description: Create a new movie.
      tags:
        - Booking
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                duration:
                  type: integer
      responses:
        '200':
          description: The movie is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie_id:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                  duration:
                    type: integer
  
    get:
      summary: Get all movies
      description: Get a list of all movies.
      tags:
        - Booking
      responses:
        '200':
          description: A list of all movies is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      type: object
                      properties:
                        movie_id:
                          type: integer
                        title:
                          type: string
                        description:
                          type: string
                        duration:
                          type: integer
  /booking/session:
    post:
      summary: Create session
      description: Create a new cinema session.
      tags:
        - Booking
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hall_id:
                  type: integer
                movie_id:
                  type: integer
                start_time:
                  type: string
                end_time:
                  type: string
      responses:
        '200':
          description: The cinema session is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: integer
                  hall_id:
                    type: integer
                  movie_id:
                    type: integer
                  start_time:
                    type: string
                  end_time:
                    type: string
    get:
      summary: Get all sessions
      description: Get a list of all cinema sessions.
      tags:
        - Booking
      parameters:
        - in: query
          name: movie_id
          schema:
            type: integer
          description: Optional parameter to filter sessions by movie.
        - in: query
          name: hall_id
          schema:
            type: integer
          description: Optional parameter to filter sessions by cinema hall.
      responses:
        '200':
          description: A list of all cinema sessions is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      type: object
                      properties:
                        session_id:
                          type: integer
                        hall_id:
                          type: integer
                        movie_id:
                          type: integer
                        start_time:
                          type: string
                        end_time:
                          type: string
  /api/sessions/hall:
    get:
      summary: Get sessions list of chosen hall
      description: Returns a list of all movie sessions scheduled in the given cinema hall
      tags:
        - Movie
      parameters:
        - in: query
          name: hall_id
          description: The ID of the cinema hall to retrieve sessions for
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieSession'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - managerAuth: []

  /api/sessions/movie:
    get:
      summary: Get sessions list of chosen movie
      description: Returns a list of all movie sessions scheduled for the given movie
      tags:
        - Movie
      parameters:
        - in: query
          name: movie_id
          description: The ID of the movie to retrieve sessions for
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieSession'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - basicAuth: []
        - bearerAuth: []
        - managerAuth: []

  /booking/session/{session_id}:
    get:
      summary: Retrieve session details
      description: Retrieves the details for a movie session.
      tags:
        - Booking
      parameters:
        - in: path
          name: session_id
          schema:
            type: integer
          required: true
          description: ID of the session to retrieve.
      responses:
        '200':
          description: The session details are successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: integer
                  hall_id:
                    type: integer
                  movie_id:
                    type: integer
                  start_time:
                    type: string
                    format: date-time
  /sessions/{sessionId}:
    put:
      summary: Edit chosen session
      tags:
        - Booking
      parameters:
        - in: path
          name: sessionId
          description: ID of the session to edit
          required: true
          schema:
            type: integer
        - in: body
          name: body
          description: Request body containing details of the session to update
          required: true
          schema:
            $ref: '#/components/schemas/SessionUpdate'
      responses:
        '200':
          description: Details of the updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieSession'
    delete:
      summary: Delete chosen session
      tags:
        - Booking
      parameters:
        - in: path
          name: sessionId
          description: ID of the session to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Confirmation of deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: Whether the deletion was
  /movie:
    post:
      summary: Create movie
      description: Create a new movie.
      tags:
        - Movie
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                duration:
                  type: integer
      responses:
        '200':
          description: The movie is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie_id:
                    type: integer
                  title:
                    type: string
                  duration:
                    type: integer
    get:
      summary: Get all movies
      description: Get a list of all movies.
      tags:
        - Movie
      responses:
        '200':
          description: List of all movies is successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    description:
                      type: string
                    genre:
                      type: string
                    duration:
                      type: integer
                    release_date:
                      type: string
                      format: date
                    image_url:
                      type: string
  /movies/{id}:
    get:
      summary: Retrieve movie details
      description: Retrieves the details for a movie.
      tags:
        - Movie
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the movie to retrieve.
      responses:
        '200':
          description: The movie details are successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                  genre:
                    type: string
                  duration:
                    type: integer
                  release_date:
                    type: string
                    format: date
                  image_url:
                    type: string
        '404':
          description: Movie not found
    put:
      summary: Update movie
      description: Updates an existing movie in the system.
      tags:
        - Movie
      parameters:
        - in: path
          name: movie_id
          required: true
          schema:
            type: integer
            description: ID of the movie to update.
      requestBody:
        description: New details for the movie.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movie_name:
                  type: string
                movie_description:
                  type: string
                movie_genre:
                  type: string
                movie_duration:
                  type: integer
                movie_release_date:
                  type: string
                  format: date
                movie_image_url:
                  type: string
      responses:
        '200':
          description: The movie details have been successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie_id:
                    type: integer
                    description: ID of the updated movie.
                  movie_name:
                    type: string
                    description: Updated name of the movie.
                  movie_description:
                    type: string
                    description: Updated description of the movie.
                  movie_genre:
                    type: string
                    description: Updated genre of the movie.
                  movie_duration:
                    type: integer
                    description: Updated duration of the movie.
                  movie_release_date:
                    type: string
                    format: date
                    description: Updated release date of the movie.
                  movie_image_url:
                    type: string
                    description: Updated URL of the movie's image.
        '404':
          description: The movie with the specified ID does not exist.
        '403':
          description: The user is not authorized to perform this action.
      paths:
  /movies/{movie_id}:
    delete:
      summary: Deletes an existing movie from the database
      tags:
        - Movie
      parameters:
        - in: path
          name: movie_id
          schema:
            type: integer
          description: The ID of the movie to delete
          required: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: Whether the movie was deleted successfully or not
                  message:
                    type: string
                    description: A message indicating the result of the operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found

components:
  schemas:
    MovieSession:
      type: object
      properties:
        session_id:
          type: integer
        movie_id:
          type: integer
        hall_id:
          type: integer
        start_time:
          type: string
          format: date-time
      required:
        - session_id
        - movie_id
        - hall_id
        - start_time
    SessionUpdate:
      type: object
      properties:
        hall_id:
          type: integer
        row:
          type: integer
        seat_number:
          type: integer
      required:
        - hall_id
        - row
        - seat_number

  responses:
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    managerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token required for manager-level access
