openapi: 3.0.0
info:
  title: System Operations API
  description: API for managing user profiles, bookings, movies, halls, and sessions.
  version: 1.0.0
paths:

  /users/register:
    post:
      summary: Create account
      description: Register a new user.
      tags:
        - User profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: The user profile is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
  /users/{userId}:                   
    get:
      summary: Retrieve user profile
      description: Retrieves the profile information for the logged-in user.
      tags:
        - User profile
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          required: true
          description: ID of the user to retrieve.
      responses:
        '200':
          description: The user details are successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  user_name:
                    type: string
                  user_email:
                    type: string
  
    put:
      summary: Update user profile info
      tags:
        - User profile
      parameters:
        - in: path
          name: userId
          description: ID of the user to edit
          required: true
          schema:
            type: integer
        - in: body
          name: body
          description: Request body containing details of the user profile to update
          required: true
          schema:
            $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Details of the updated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /users/login:
    get:
      summary: Log in to an existing account
      description: Log in to an existing account with email and password.
      tags:
        - User profile
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: true
          description: Email address of the user account to log in to.
        - in: query
          name: password
          schema:
            type: string
          required: true
          description: Password of the user account to log in to.
      responses:
        '200':
          description: The user logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
  /users/{userId}/password-recovery:
    put:
      summary: Update user password
      tags:
        - User profile
      parameters:
        - in: path
          name: userId
          description: ID of the user
          required: true
          schema:
            type: integer
        - in: body
          name: body
          description: Request body containing details about the new password
          required: true
          schema:
            $ref: '#/components/schemas/UpdatePassword'
      responses:
        '200':
          description: The user can continue to work with the system with new password.
  /users/token/refresh:
    get:
      summary: Update expired access token
      description: Updates an expired access token.
      tags:
        - User profile
      parameters:
        - in: query
          name: refresh_token
          schema:
            type: string
          required: true
          description: Refresh token to update access token.
      responses:
        '200':
          description: The user can continue to work with the system.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
  /booking/halls:
    post:
      summary: Create hall
      description: Create a new cinema hall.
      tags:
        - Booking
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hall_name:
                  type: string
      responses:
        '200':
          description: The hall is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hall_id:
                    type: integer
                  hall_name:
                    type: string
    get:
      summary: Get all halls
      description: Get a list of all cinema halls.
      tags:
        - Booking
      responses:
        '200':
          description: A list of all cinema halls is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  halls:
                    type: array
                    items:
                      type: object
                      properties:
                        hall_id:
                          type: integer
                        hall_name:
                          type: string
  /booking/halls/{hallId}:
    put:
      summary: Update a chosen hall
      tags:
        - Booking
      parameters:
        - in: path
          name: hallId
          description: ID of the hall to update
          required: true
          schema:
            type: integer
        - in: body
          name: body
          description: Request body containing updated details of the hall
          required: true
          schema:
            $ref: '#/components/schemas/HallUpdate'
      responses:
        '200':
          description: Details of the updated hall
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hall'
      
    delete:
      summary: Delete chosen hall
      tags:
        - Booking
      parameters:
        - in: path
          name: hallId
          description: ID of the hall to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: The hall has been successfully deleted
        '404':
          $ref: '#/components/responses/NotFound'          

  # /booking/movies:
  #   post:
  #     summary: Create movie
  #     description: Create a new movie.
  #     tags:
  #       - Booking
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               title:
  #                 type: string
  #               description:
  #                 type: string
  #               duration:
  #                 type: integer
  #     responses:
  #       '200':
  #         description: The movie is created successfully.
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 movie_id:
  #                   type: integer
  #                 title:
  #                   type: string
  #                 description:
  #                   type: string
  #                 duration:
  #                   type: integer
  
  #   get:
  #     summary: Get all movies
  #     description: Get a list of all movies.
  #     tags:
  #       - Booking
  #     responses:
  #       '200':
  #         description: A list of all movies is returned.
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 movies:
  #                   type: array
  #                   items:
  #                     type: object
  #                     properties:
  #                       movie_id:
  #                         type: integer
  #                       title:
  #                         type: string
  #                       description:
  #                         type: string
  #                       duration:
  #                         type: integer
  # /booking/movies/{movieId}:
  #   put:
  #     summary: Edit chosen movie
  #     tags:
  #       - Booking
  #     parameters:
  #       - in: path
  #         name: movieId
  #         description: ID of the movie to edit
  #         required: true
  #         schema:
  #           type: integer
  #       - in: body
  #         name: body
  #         description: Request body containing details of the movie booking to update
  #         required: true
  #         schema:
  #           $ref: '#/components/schemas/MovieBookingUpdate'
  #     responses:
  #       '200':
  #         description: Details of the updated movie booking
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/MovieBooking'
  #   delete:
  #     summary: Delete a movie
  #     tags:
  #       - Booking
  #     parameters:
  #       - in: path
  #         name: movieId
  #         description: ID of the movie to delete
  #         required: true
  #         schema:
  #           type: integer
  #     responses:
  #       '204':
  #         description: Movie deleted successfully
  #       '404':
  #         description: Movie not found
  #       '500':
  #         description: Internal server error


  /booking/sessions:
    post:
      summary: Create session
      description: Create a new cinema session.
      tags:
        - Booking
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hall_id:
                  type: integer
                movie_id:
                  type: integer
                start_time:
                  type: string
                end_time:
                  type: string
      responses:
        '200':
          description: The cinema session is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: integer
                  hall_id:
                    type: integer
                  movie_id:
                    type: integer
                  start_time:
                    type: string
                  end_time:
                    type: string
    get:
      summary: Get all sessions
      description: Get a list of all cinema sessions.
      tags:
        - Booking
      parameters:
        - in: query
          name: movie_id
          schema:
            type: integer
          description: Optional parameter to filter sessions by movie.
        - in: query
          name: hall_id
          schema:
            type: integer
          description: Optional parameter to filter sessions by cinema hall.
      responses:
        '200':
          description: A list of all cinema sessions is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      type: object
                      properties:
                        session_id:
                          type: integer
                        hall_id:
                          type: integer
                        movie_id:
                          type: integer
                        start_time:
                          type: string
                        end_time:
                          type: string

  /booking/sessions/{sessionId}:
    get:
      summary: Retrieve session details
      description: Retrieves the details for a movie session.
      tags:
        - Booking
      parameters:
        - in: path
          name: session_id
          schema:
            type: integer
          required: true
          description: ID of the session to retrieve.
      responses:
        '200':
          description: The session details are successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: integer
                  hall_id:
                    type: integer
                  movie_id:
                    type: integer
                  start_time:
                    type: string
                    format: date-time
  
    put:
      summary: Edit chosen session
      tags:
        - Booking
      parameters:
        - in: path
          name: sessionId
          description: ID of the session to edit
          required: true
          schema:
            type: integer
        - in: body
          name: body
          description: Request body containing details of the session to update
          required: true
          schema:
            $ref: '#/components/schemas/SessionUpdate'
      responses:
        '200':
          description: Details of the updated session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieSession'
    delete:
      summary: Delete chosen session
      tags:
        - Booking
      parameters:
        - in: path
          name: sessionId
          description: ID of the session to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Confirmation of deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: Whether the deletion was
  /movies/movie:
    post:
      summary: Create movie
      description: Create a new movie.
      tags:
        - Movie
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                duration:
                  type: integer
      responses:
        '200':
          description: The movie is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie_id:
                    type: integer
                  title:
                    type: string
                  duration:
                    type: integer
    get:
      summary: Get all movies
      description: Get a list of all movies.
      tags:
        - Movie
      responses:
        '200':
          description: List of all movies is successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    description:
                      type: string
                    genre:
                      type: string
                    duration:
                      type: integer
                    release_date:
                      type: string
                      format: date
                    image_url:
                      type: string
  /movies/{movieId}:
    get:
      summary: Retrieve movie details
      description: Retrieves the details for a movie.
      tags:
        - Movie
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the movie to retrieve.
      responses:
        '200':
          description: The movie details are successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                  genre:
                    type: string
                  duration:
                    type: integer
                  release_date:
                    type: string
                    format: date
                  image_url:
                    type: string
        '404':
          description: Movie not found
    put:
      summary: Update movie
      description: Updates an existing movie in the system.
      tags:
        - Movie
      parameters:
        - in: path
          name: movie_id
          required: true
          schema:
            type: integer
            description: ID of the movie to update.
      requestBody:
        description: New details for the movie.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movie_name:
                  type: string
                movie_description:
                  type: string
                movie_genre:
                  type: string
                movie_duration:
                  type: integer
                movie_release_date:
                  type: string
                  format: date
                movie_image_url:
                  type: string
      responses:
        '200':
          description: The movie details have been successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie_id:
                    type: integer
                    description: ID of the updated movie.
                  movie_name:
                    type: string
                    description: Updated name of the movie.
                  movie_description:
                    type: string
                    description: Updated description of the movie.
                  movie_genre:
                    type: string
                    description: Updated genre of the movie.
                  movie_duration:
                    type: integer
                    description: Updated duration of the movie.
                  movie_release_date:
                    type: string
                    format: date
                    description: Updated release date of the movie.
                  movie_image_url:
                    type: string
                    description: Updated URL of the movie's image.
        '404':
          description: The movie with the specified ID does not exist.
        '403':
          description: The user is not authorized to perform this action.
      paths:
  
    delete:
      summary: Deletes an existing movie from the database
      tags:
        - Movie
      parameters:
        - in: path
          name: movie_id
          schema:
            type: integer
          description: The ID of the movie to delete
          required: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: Whether the movie was deleted successfully or not
                  message:
                    type: string
                    description: A message indicating the result of the operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /reviews/review:
    post:
      summary: Create review
      description: Create a new review.
      tags:
        - Review
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movie_id:
                  type: string
                user_id:
                  type: integer
                rating:
                  type: integer
                comment:
                  type: string
      responses:
        '200':
          description: The review is created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  movie_id:
                    type: integer
                  rating:
                    type: integer
                  comment:
                    type: string
    get:
      summary: Get all reviews
      description: Get a list of all reviews.
      tags:
        - Review
      responses:
        '200':
          description: List of all reviews is successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
                
  /users/{userId}/reviews/{reviewId}:
    put:
      summary: Edit user review
      tags:
        - Review
      parameters:
        - in: path
          name: reviewId
          description: ID of the review to edit
          required: true
          schema:
            type: integer
        - in: path
          name: movieId
          description: ID of the user
          required: true
          schema:
            type: integer
        - in: body
          name: body
          description: Request body containing details of the review to update
          required: true
          schema:
            $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Details of the updated review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

    delete:
      summary: Deletes an existing user review from the database
      tags:
        - Review
      parameters:
        - in: path
          name: movieId
          schema:
            type: integer
          description: The ID of the user review to delete
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
          description: The ID of the user
          required: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    description: Whether the review was deleted successfully or not
                  message:
                    type: string
                    description: A message indicating the result of the operation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    

components:
  schemas:
    UserProfile:
      type: object
      properties:
        user_id: 
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
        movie_notifications:
          type: boolean
      required:
        - user_id
        - name
        - email
        - role
        - movie_notifications

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        movie_notifications:
          type: boolean

    UpdatePassword:
      type: object
      properties:
        new_password:
          type: string
        confirmation_password:
          type: string

    Hall:
      type: object
      properties:
        hall_id:
          type: integer
        name:
          type: string
        capacity:
          type: integer
      required:
        - hall_id
        - name
        - capacity

    HallUpdate:
      type: object
      properties:
        name:
          type: string
        capacity:
          type: integer
      required:
        - name
        - capacity

    MovieSession:
      type: object
      properties:
        session_id:
          type: integer
        movie_id:
          type: integer
        hall_id:
          type: integer
        start_time:
          type: string
          format: date-time
      required:
        - session_id
        - movie_id
        - hall_id
        - start_time

    SessionUpdate:
      type: object
      properties:
        hall_id:
          type: integer
        row:
          type: integer
        seat_number:
          type: integer
      required:
        - hall_id
        - row
        - seat_number

    MovieBookingUpdate:
      type: object
      properties:
        session_id:
          type: integer
        seats:
          type: array
          items:
            type: object
            properties:
              row:
                type: integer
              seat_number:
                type: integer
          minItems: 1
          maxItems: 10
      required:
        - session_id
        - seats

    MovieBooking:
      type: object
      properties:
        booking_id:
          type: integer
        session_id:
          type: integer
        user_id:
          type: integer
        seats:
          type: array
          items:
            type: object
            properties:
              row:
                type: integer
              seat_number:
                type: integer
          minItems: 1
          maxItems: 10
      required:
        - booking_id
        - session_id
        - user_id
        - seats
    
    Review:
      type: object
      properties:
        movie_id:
          type: string
        user_id:
          type: integer
        rating:
          type: integer
        comment:
          type: string

  responses:
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
  

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    managerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token required for manager-level access
